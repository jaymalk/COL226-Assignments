type token =
  | LP
  | RP
  | COMMA
  | PROJ
  | IF
  | THEN
  | ELSE
  | FI
  | TILDA
  | ABS
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | REM
  | NOT
  | CONJ
  | DISJ
  | EQ
  | GT
  | LT
  | BACKSLASH
  | DOT
  | BOOL of (bool)
  | INT of (int)
  | ID of (string)
  | DEF
  | LET
  | IN
  | END
  | LOCAL
  | SEMICOLON
  | PARALLEL
  | DELIMITER
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "a3.mly"
    open A1
    exception Bad_State
# 44 "a3.ml"
let yytransl_const = [|
  257 (* LP *);
  258 (* RP *);
  259 (* COMMA *);
  260 (* PROJ *);
  261 (* IF *);
  262 (* THEN *);
  263 (* ELSE *);
  264 (* FI *);
  265 (* TILDA *);
  266 (* ABS *);
  267 (* PLUS *);
  268 (* MINUS *);
  269 (* TIMES *);
  270 (* DIV *);
  271 (* REM *);
  272 (* NOT *);
  273 (* CONJ *);
  274 (* DISJ *);
  275 (* EQ *);
  276 (* GT *);
  277 (* LT *);
  278 (* BACKSLASH *);
  279 (* DOT *);
  283 (* DEF *);
  284 (* LET *);
  285 (* IN *);
  286 (* END *);
  287 (* LOCAL *);
  288 (* SEMICOLON *);
  289 (* PARALLEL *);
  290 (* DELIMITER *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  280 (* BOOL *);
  281 (* INT *);
  282 (* ID *);
    0|]

let yylhs = "\255\255\
\002\000\003\000\003\000\003\000\007\000\005\000\005\000\008\000\
\008\000\006\000\006\000\004\000\010\000\010\000\010\000\010\000\
\010\000\009\000\009\000\012\000\012\000\013\000\013\000\013\000\
\011\000\014\000\014\000\015\000\015\000\016\000\016\000\017\000\
\017\000\018\000\018\000\019\000\019\000\019\000\020\000\020\000\
\020\000\021\000\021\000\022\000\022\000\022\000\022\000\022\000\
\022\000\001\000\023\000\023\000\024\000\024\000\024\000\025\000\
\000\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\007\000\002\000\003\000\003\000\
\003\000\007\000\007\000\001\000\003\000\003\000\003\000\004\000\
\004\000\003\000\001\000\003\000\001\000\002\000\001\000\001\000\
\001\000\003\000\001\000\003\000\001\000\003\000\001\000\003\000\
\001\000\003\000\001\000\001\000\002\000\002\000\004\000\004\000\
\001\000\004\000\001\000\001\000\001\000\001\000\003\000\001\000\
\005\000\002\000\005\000\001\000\003\000\004\000\001\000\004\000\
\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\057\000\000\000\000\000\
\055\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\000\044\000\046\000\000\000\058\000\000\000\002\000\003\000\
\000\000\048\000\012\000\024\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\000\000\000\041\000\043\000\
\000\000\000\000\050\000\000\000\000\000\006\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\037\000\022\000\000\000\
\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\053\000\000\000\047\000\000\000\007\000\000\000\000\000\000\000\
\000\000\000\000\000\000\013\000\000\000\014\000\000\000\015\000\
\018\000\020\000\000\000\000\000\000\000\000\000\034\000\000\000\
\056\000\000\000\054\000\000\000\009\000\000\000\000\000\042\000\
\000\000\039\000\016\000\017\000\040\000\051\000\000\000\000\000\
\049\000\000\000\000\000\000\000\011\000\010\000\005\000\000\000"

let yydgoto = "\003\000\
\006\000\021\000\022\000\023\000\024\000\052\000\026\000\048\000\
\027\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\007\000\008\000\
\009\000"

let yysindex = "\017\000\
\236\254\102\255\000\000\239\254\236\254\000\000\006\000\255\254\
\000\000\019\255\013\255\102\255\180\255\180\255\180\255\246\254\
\000\000\000\000\000\000\236\254\000\000\022\000\000\000\000\000\
\024\255\000\000\000\000\000\000\018\255\028\255\025\255\037\255\
\040\255\041\255\039\255\047\255\000\000\054\255\000\000\000\000\
\051\255\038\255\000\000\055\255\033\255\000\000\048\255\076\255\
\058\255\079\255\102\255\024\255\000\000\000\000\000\000\063\255\
\059\255\000\000\102\255\180\255\130\255\141\255\170\255\170\255\
\180\255\180\255\180\255\180\255\180\255\102\255\102\255\236\254\
\000\000\055\255\000\000\102\255\000\000\086\255\102\255\088\255\
\035\255\102\255\089\255\000\000\180\255\000\000\180\255\000\000\
\000\000\000\000\040\255\041\255\039\255\047\255\000\000\090\255\
\000\000\064\255\000\000\092\255\000\000\068\255\093\255\000\000\
\069\255\000\000\000\000\000\000\000\000\000\000\099\255\102\255\
\000\000\004\255\094\255\019\255\000\000\000\000\000\000\092\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\055\001\000\000\000\000\000\000\017\001\069\001\037\001\253\000\
\213\000\161\000\097\000\033\000\000\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\233\000\193\000\129\000\065\000\000\000\000\000\
\000\000\000\000\000\000\103\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\005\000\000\000\246\255\254\255\000\000\032\000\
\046\000\000\000\011\000\049\000\000\000\000\000\050\000\053\000\
\055\000\048\000\245\255\000\000\000\000\039\000\007\000\000\000\
\216\255"

let yytablesize = 614
let yytable = "\025\000\
\036\000\053\000\054\000\073\000\116\000\043\000\004\000\025\000\
\041\000\025\000\005\000\042\000\052\000\049\000\047\000\056\000\
\050\000\001\000\002\000\010\000\046\000\058\000\011\000\012\000\
\059\000\055\000\057\000\013\000\014\000\117\000\044\000\045\000\
\033\000\099\000\015\000\051\000\060\000\061\000\062\000\012\000\
\016\000\064\000\017\000\018\000\019\000\063\000\020\000\065\000\
\025\000\075\000\076\000\066\000\068\000\067\000\070\000\080\000\
\025\000\095\000\017\000\018\000\019\000\069\000\020\000\083\000\
\032\000\074\000\072\000\025\000\025\000\071\000\084\000\086\000\
\088\000\025\000\096\000\097\000\025\000\077\000\098\000\025\000\
\100\000\004\000\078\000\103\000\079\000\081\000\105\000\082\000\
\102\000\075\000\106\000\109\000\111\000\110\000\076\000\107\000\
\031\000\108\000\113\000\112\000\114\000\119\000\010\000\118\000\
\008\000\011\000\012\000\101\000\089\000\025\000\013\000\014\000\
\090\000\025\000\091\000\094\000\115\000\015\000\092\000\104\000\
\120\000\093\000\000\000\016\000\000\000\017\000\018\000\019\000\
\030\000\020\000\051\000\000\000\000\000\011\000\012\000\000\000\
\000\000\000\000\013\000\014\000\000\000\051\000\000\000\000\000\
\011\000\012\000\000\000\000\000\085\000\013\000\014\000\016\000\
\000\000\017\000\018\000\019\000\000\000\020\000\000\000\087\000\
\029\000\000\000\016\000\000\000\017\000\018\000\019\000\000\000\
\020\000\000\000\051\000\000\000\000\000\011\000\012\000\000\000\
\000\000\000\000\013\000\014\000\051\000\000\000\000\000\011\000\
\012\000\015\000\000\000\000\000\013\000\014\000\000\000\016\000\
\028\000\017\000\018\000\019\000\000\000\020\000\000\000\000\000\
\000\000\016\000\000\000\017\000\018\000\019\000\000\000\020\000\
\000\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\
\000\000\000\000\036\000\036\000\000\000\000\000\036\000\036\000\
\036\000\000\000\000\000\036\000\036\000\036\000\036\000\036\000\
\023\000\036\000\036\000\036\000\036\000\036\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\036\000\036\000\000\000\
\036\000\036\000\033\000\033\000\021\000\000\000\033\000\033\000\
\033\000\052\000\052\000\033\000\033\000\033\000\033\000\000\000\
\000\000\033\000\033\000\033\000\033\000\033\000\004\000\000\000\
\000\000\000\000\000\000\000\000\000\000\033\000\033\000\000\000\
\033\000\033\000\032\000\032\000\019\000\000\000\032\000\032\000\
\032\000\000\000\000\000\032\000\032\000\032\000\032\000\000\000\
\000\000\032\000\032\000\032\000\032\000\032\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\032\000\032\000\000\000\
\032\000\032\000\031\000\031\000\000\000\000\000\031\000\031\000\
\031\000\000\000\000\000\031\000\031\000\031\000\000\000\000\000\
\000\000\031\000\031\000\031\000\031\000\031\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\031\000\031\000\000\000\
\031\000\031\000\030\000\030\000\000\000\000\000\030\000\030\000\
\030\000\000\000\000\000\030\000\030\000\030\000\000\000\000\000\
\000\000\030\000\030\000\030\000\030\000\030\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\030\000\030\000\000\000\
\030\000\030\000\029\000\029\000\000\000\000\000\029\000\029\000\
\029\000\000\000\000\000\029\000\029\000\000\000\000\000\000\000\
\000\000\029\000\029\000\029\000\029\000\029\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\029\000\029\000\000\000\
\029\000\029\000\028\000\028\000\000\000\000\000\028\000\028\000\
\028\000\000\000\000\000\028\000\028\000\000\000\000\000\000\000\
\000\000\028\000\028\000\028\000\028\000\028\000\027\000\027\000\
\000\000\000\000\027\000\027\000\027\000\028\000\028\000\027\000\
\028\000\028\000\000\000\000\000\000\000\027\000\027\000\027\000\
\027\000\027\000\026\000\026\000\000\000\000\000\026\000\026\000\
\026\000\027\000\027\000\026\000\027\000\027\000\000\000\000\000\
\000\000\026\000\026\000\026\000\026\000\026\000\025\000\025\000\
\000\000\000\000\025\000\025\000\025\000\026\000\026\000\000\000\
\026\000\026\000\000\000\000\000\000\000\025\000\025\000\025\000\
\025\000\025\000\023\000\023\000\000\000\000\000\023\000\023\000\
\023\000\025\000\025\000\000\000\025\000\025\000\000\000\000\000\
\000\000\023\000\023\000\000\000\000\000\000\000\021\000\021\000\
\000\000\000\000\021\000\021\000\021\000\023\000\023\000\000\000\
\023\000\023\000\000\000\000\000\000\000\000\000\021\000\000\000\
\004\000\004\000\000\000\000\000\004\000\004\000\004\000\000\000\
\000\000\021\000\021\000\000\000\021\000\021\000\019\000\019\000\
\000\000\000\000\019\000\019\000\019\000\000\000\000\000\000\000\
\000\000\000\000\000\000\004\000\004\000\000\000\004\000\004\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\019\000\019\000\000\000\019\000\019\000"

let yycheck = "\002\000\
\000\000\013\000\014\000\044\000\001\001\000\000\027\001\010\000\
\026\001\012\000\031\001\005\000\000\000\001\001\010\000\026\001\
\012\000\001\000\002\000\001\001\002\001\000\000\004\001\005\001\
\001\001\015\000\020\000\009\001\010\001\026\001\032\001\033\001\
\000\000\074\000\016\001\001\001\019\001\020\001\021\001\005\001\
\022\001\017\001\024\001\025\001\026\001\018\001\028\001\011\001\
\051\000\002\001\003\001\012\001\014\001\013\001\001\001\051\000\
\059\000\069\000\024\001\025\001\026\001\015\001\028\001\059\000\
\000\000\033\001\029\001\070\000\071\000\019\001\060\000\061\000\
\062\000\076\000\070\000\071\000\079\000\002\001\072\000\082\000\
\076\000\027\001\025\001\079\000\006\001\023\001\082\000\029\001\
\003\001\002\001\002\001\002\001\025\001\030\001\003\001\085\000\
\000\000\087\000\030\001\007\001\002\001\008\001\001\001\114\000\
\002\001\004\001\005\001\076\000\063\000\112\000\009\001\010\001\
\064\000\116\000\065\000\068\000\112\000\016\001\066\000\081\000\
\116\000\067\000\255\255\022\001\255\255\024\001\025\001\026\001\
\000\000\028\001\001\001\255\255\255\255\004\001\005\001\255\255\
\255\255\255\255\009\001\010\001\255\255\001\001\255\255\255\255\
\004\001\005\001\255\255\255\255\019\001\009\001\010\001\022\001\
\255\255\024\001\025\001\026\001\255\255\028\001\255\255\019\001\
\000\000\255\255\022\001\255\255\024\001\025\001\026\001\255\255\
\028\001\255\255\001\001\255\255\255\255\004\001\005\001\255\255\
\255\255\255\255\009\001\010\001\001\001\255\255\255\255\004\001\
\005\001\016\001\255\255\255\255\009\001\010\001\255\255\022\001\
\000\000\024\001\025\001\026\001\255\255\028\001\255\255\255\255\
\255\255\022\001\255\255\024\001\025\001\026\001\255\255\028\001\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\255\255\006\001\007\001\
\008\001\255\255\255\255\011\001\012\001\013\001\014\001\015\001\
\000\000\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\255\255\
\032\001\033\001\002\001\003\001\000\000\255\255\006\001\007\001\
\008\001\029\001\030\001\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\255\255\
\032\001\033\001\002\001\003\001\000\000\255\255\006\001\007\001\
\008\001\255\255\255\255\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\255\255\
\032\001\033\001\002\001\003\001\255\255\255\255\006\001\007\001\
\008\001\255\255\255\255\011\001\012\001\013\001\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\255\255\
\032\001\033\001\002\001\003\001\255\255\255\255\006\001\007\001\
\008\001\255\255\255\255\011\001\012\001\013\001\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\255\255\
\032\001\033\001\002\001\003\001\255\255\255\255\006\001\007\001\
\008\001\255\255\255\255\011\001\012\001\255\255\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\255\255\
\032\001\033\001\002\001\003\001\255\255\255\255\006\001\007\001\
\008\001\255\255\255\255\011\001\012\001\255\255\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\002\001\003\001\
\255\255\255\255\006\001\007\001\008\001\029\001\030\001\011\001\
\032\001\033\001\255\255\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\002\001\003\001\255\255\255\255\006\001\007\001\
\008\001\029\001\030\001\011\001\032\001\033\001\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\002\001\003\001\
\255\255\255\255\006\001\007\001\008\001\029\001\030\001\255\255\
\032\001\033\001\255\255\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\002\001\003\001\255\255\255\255\006\001\007\001\
\008\001\029\001\030\001\255\255\032\001\033\001\255\255\255\255\
\255\255\017\001\018\001\255\255\255\255\255\255\002\001\003\001\
\255\255\255\255\006\001\007\001\008\001\029\001\030\001\255\255\
\032\001\033\001\255\255\255\255\255\255\255\255\018\001\255\255\
\002\001\003\001\255\255\255\255\006\001\007\001\008\001\255\255\
\255\255\029\001\030\001\255\255\032\001\033\001\002\001\003\001\
\255\255\255\255\006\001\007\001\008\001\255\255\255\255\255\255\
\255\255\255\255\255\255\029\001\030\001\255\255\032\001\033\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\029\001\030\001\255\255\032\001\033\001"

let yynames_const = "\
  LP\000\
  RP\000\
  COMMA\000\
  PROJ\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FI\000\
  TILDA\000\
  ABS\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  REM\000\
  NOT\000\
  CONJ\000\
  DISJ\000\
  EQ\000\
  GT\000\
  LT\000\
  BACKSLASH\000\
  DOT\000\
  DEF\000\
  LET\000\
  IN\000\
  END\000\
  LOCAL\000\
  SEMICOLON\000\
  PARALLEL\000\
  DELIMITER\000\
  EOF\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'premain) in
    Obj.repr(
# 53 "a3.mly"
                                    ( _1 )
# 376 "a3.ml"
               : A1.exptree))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 57 "a3.mly"
                                  ( _1 )
# 383 "a3.ml"
               : 'premain))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tuple) in
    Obj.repr(
# 59 "a3.mly"
                                  ( _1 )
# 390 "a3.ml"
               : 'premain))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'projections) in
    Obj.repr(
# 60 "a3.mly"
                                  ( _1 )
# 397 "a3.ml"
               : 'premain))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'premain) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'premain) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'premain) in
    Obj.repr(
# 65 "a3.mly"
                                               (IfThenElse(_2, _4, _6))
# 406 "a3.ml"
               : 'conditional))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "a3.mly"
                                  (Tuple(0, []))
# 412 "a3.ml"
               : 'tuple))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tuple_list) in
    Obj.repr(
# 71 "a3.mly"
                                  ( _2 )
# 419 "a3.ml"
               : 'tuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'premain) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'premain) in
    Obj.repr(
# 74 "a3.mly"
                                        (Tuple(2, [_1; _3]))
# 427 "a3.ml"
               : 'tuple_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'premain) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tuple_list) in
    Obj.repr(
# 75 "a3.mly"
                                     (match _3 with Tuple(x, el) -> Tuple(x+1, _1::el) | _ -> raise Bad_State)
# 435 "a3.ml"
               : 'tuple_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'tuple) in
    Obj.repr(
# 79 "a3.mly"
                                   (Project((_3, _5), _7))
# 444 "a3.ml"
               : 'projections))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 80 "a3.mly"
                                   (Project((_3, _5), Var(_7)))
# 453 "a3.ml"
               : 'projections))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'or_expression) in
    Obj.repr(
# 84 "a3.mly"
                                              ( _1 )
# 460 "a3.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmetic_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmetic_expression) in
    Obj.repr(
# 88 "a3.mly"
                                                          (Equals(_1, _3))
# 468 "a3.ml"
               : 'comparison))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmetic_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmetic_expression) in
    Obj.repr(
# 89 "a3.mly"
                                                          (GreaterT(_1, _3))
# 476 "a3.ml"
               : 'comparison))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arithmetic_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arithmetic_expression) in
    Obj.repr(
# 90 "a3.mly"
                                                          (LessT(_1, _3))
# 484 "a3.ml"
               : 'comparison))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'arithmetic_expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'arithmetic_expression) in
    Obj.repr(
# 91 "a3.mly"
                                                          (GreaterTE(_1, _4))
# 492 "a3.ml"
               : 'comparison))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'arithmetic_expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'arithmetic_expression) in
    Obj.repr(
# 92 "a3.mly"
                                                          (LessTE(_1, _4))
# 500 "a3.ml"
               : 'comparison))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'or_expression) in
    Obj.repr(
# 96 "a3.mly"
                                              (Disjunction(_1, _3))
# 508 "a3.ml"
               : 'or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'and_expression) in
    Obj.repr(
# 97 "a3.mly"
                                              ( _1 )
# 515 "a3.ml"
               : 'or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'not_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'and_expression) in
    Obj.repr(
# 100 "a3.mly"
                                              (Conjunction(_1, _3))
# 523 "a3.ml"
               : 'and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'not_expression) in
    Obj.repr(
# 101 "a3.mly"
                                              ( _1 )
# 530 "a3.ml"
               : 'and_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arithmetic_expression) in
    Obj.repr(
# 104 "a3.mly"
                                              (Not(_2))
# 537 "a3.ml"
               : 'not_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arithmetic_expression) in
    Obj.repr(
# 105 "a3.mly"
                                              ( _1 )
# 544 "a3.ml"
               : 'not_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'comparison) in
    Obj.repr(
# 107 "a3.mly"
                                              ( _1 )
# 551 "a3.ml"
               : 'not_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'add_expression) in
    Obj.repr(
# 111 "a3.mly"
                                              ( _1 )
# 558 "a3.ml"
               : 'arithmetic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'add_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'sub_expression) in
    Obj.repr(
# 114 "a3.mly"
                                              (Add(_1, _3))
# 566 "a3.ml"
               : 'add_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sub_expression) in
    Obj.repr(
# 115 "a3.mly"
                                              ( _1 )
# 573 "a3.ml"
               : 'add_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'sub_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mult_expression) in
    Obj.repr(
# 118 "a3.mly"
                                              (Sub(_1, _3))
# 581 "a3.ml"
               : 'sub_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mult_expression) in
    Obj.repr(
# 119 "a3.mly"
                                              ( _1 )
# 588 "a3.ml"
               : 'sub_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mult_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'div_expression) in
    Obj.repr(
# 122 "a3.mly"
                                              (Mult(_1, _3))
# 596 "a3.ml"
               : 'mult_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'div_expression) in
    Obj.repr(
# 123 "a3.mly"
                                              ( _1 )
# 603 "a3.ml"
               : 'mult_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'div_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rem_expression) in
    Obj.repr(
# 126 "a3.mly"
                                              (Div(_1, _3))
# 611 "a3.ml"
               : 'div_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rem_expression) in
    Obj.repr(
# 127 "a3.mly"
                                              ( _1 )
# 618 "a3.ml"
               : 'div_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rem_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'unary_arithmetic) in
    Obj.repr(
# 130 "a3.mly"
                                              (Rem(_1, _3))
# 626 "a3.ml"
               : 'rem_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_arithmetic) in
    Obj.repr(
# 131 "a3.mly"
                                              ( _1 )
# 633 "a3.ml"
               : 'rem_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_call) in
    Obj.repr(
# 134 "a3.mly"
                                              ( _1 )
# 640 "a3.ml"
               : 'unary_arithmetic))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_arithmetic) in
    Obj.repr(
# 135 "a3.mly"
                                              (Abs(_2))
# 647 "a3.ml"
               : 'unary_arithmetic))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_arithmetic) in
    Obj.repr(
# 136 "a3.mly"
                                              (Negative(_2))
# 654 "a3.ml"
               : 'unary_arithmetic))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'projections) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'premain) in
    Obj.repr(
# 141 "a3.mly"
                                  (FunctionCall(_1, _3))
# 662 "a3.ml"
               : 'func_call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'func_call) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'premain) in
    Obj.repr(
# 142 "a3.mly"
                                  (FunctionCall(_1, _3))
# 670 "a3.ml"
               : 'func_call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func_abs) in
    Obj.repr(
# 143 "a3.mly"
                                  ( _1 )
# 677 "a3.ml"
               : 'func_call))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'basic_unit) in
    Obj.repr(
# 146 "a3.mly"
                                              (FunctionAbstraction(_2, _4))
# 685 "a3.ml"
               : 'func_abs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'basic_unit) in
    Obj.repr(
# 147 "a3.mly"
                                              ( _1 )
# 692 "a3.ml"
               : 'func_abs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 151 "a3.mly"
                                              (N(_1))
# 699 "a3.ml"
               : 'basic_unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 153 "a3.mly"
                                              (B(_1))
# 706 "a3.ml"
               : 'basic_unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 155 "a3.mly"
                                              (Var(_1))
# 713 "a3.ml"
               : 'basic_unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'premain) in
    Obj.repr(
# 157 "a3.mly"
                                              (InParen(_2))
# 720 "a3.ml"
               : 'basic_unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional) in
    Obj.repr(
# 159 "a3.mly"
                                              (_1)
# 727 "a3.ml"
               : 'basic_unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'predef) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'premain) in
    Obj.repr(
# 161 "a3.mly"
                                              (Let(_2, _4))
# 735 "a3.ml"
               : 'basic_unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'predef) in
    Obj.repr(
# 165 "a3.mly"
                                           (_1)
# 742 "a3.ml"
               : A1.definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'predef) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'predef) in
    Obj.repr(
# 169 "a3.mly"
                                   (Local(_2, _4))
# 750 "a3.ml"
               : 'predef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'series) in
    Obj.repr(
# 170 "a3.mly"
                                   ( _1 )
# 757 "a3.ml"
               : 'predef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'series) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'basic_def) in
    Obj.repr(
# 174 "a3.mly"
                                               (Sequence([_1; _3]))
# 765 "a3.ml"
               : 'series))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'series) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'basic_def) in
    Obj.repr(
# 175 "a3.mly"
                                               (Parallel([_1; _4]))
# 773 "a3.ml"
               : 'series))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'basic_def) in
    Obj.repr(
# 176 "a3.mly"
                                               ( _1 )
# 780 "a3.ml"
               : 'series))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'premain) in
    Obj.repr(
# 180 "a3.mly"
                                           (Simple(_2, _4))
# 788 "a3.ml"
               : 'basic_def))
(* Entry def_parser *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry exp_parser *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let def_parser (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : A1.definition)
let exp_parser (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : A1.exptree)
